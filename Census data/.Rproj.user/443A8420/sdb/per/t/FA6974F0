{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(caret)\nlibrary(mlr)\n\npath <- \"C:\\\\Users\\\\geeky\\\\Documents\\\\Projects\\\\Census problem - Imbalanced Data\\\\Data\\\\\"\nsetwd(path)\n\ntrain <- fread(\"train.csv\",na.strings = c(\"\",\" \",\"?\",\"NA\",NA))\ntest <- fread(\"test.csv\",na.strings = c(\"\",\" \",\"?\",\"NA\",NA))\n\ndim(train); str (train); View(train)\ndim(test); str (test); View(test)\n\ntrain[1:5]\ntest [1:5]\nunique(train$income_level)\nunique(test$income_level)\n\ntrain[,income_level := ifelse(income_level == \"-50000\",0,1)]\ntest[,income_level := ifelse(income_level == \"-50000\",0,1)]\n\nround(prop.table(table(train$income_level))*100)\n\nfactcols <- c(2:5,7,8:16,20:29,31:38,40,41)\nnumcols <- setdiff(1:40,factcols)\n\ntrain[,(factcols) := lapply(.SD, factor), .SDcols = factcols]\ntrain[,(numcols) := lapply(.SD, as.numeric), .SDcols = numcols]\n\ntest[,(factcols) := lapply(.SD, factor), .SDcols = factcols]\ntest[,(numcols) := lapply(.SD, as.numeric), .SDcols = numcols]\n\ncat_train <- train[,factcols, with=FALSE]\ncat_test <- test[,factcols,with=FALSE]\n\nnum_train <- train[,numcols,with=FALSE]\nnum_test <- test[,numcols,with=FALSE] > rm(train,test) \n\ntr <- function(a){ ggplot(data = num_train, aes(x= a, y=..density..)) + geom_histogram(fill=\"blue\",color=\"red\",alpha = 0.5,bins =100) + geom_density() ggplotly() }\ntr(num_train$age)\ntr(num_train$capital_losses)\nnum_train[,income_level := cat_train$income_level] \n\nggplot(data=num_train,aes(x = age, y=wage_per_hour))+geom_point(aes(colour=income_level))+scale_y_continuous(\"wage per hour\", breaks = seq(0,10000,1000))\n\nall_bar <- function(i){ ggplot(cat_train,aes(x=i,fill=income_level))+geom_bar(position = \"dodge\",  color=\"black\")+scale_fill_brewer(palette = \"Pastel1\")+theme(axis.text.x =element_text(angle  = 60,hjust = 1,size=10)) }\n\nall_bar(cat_train$class_of_worker)\nall_bar(cat_train$education)\n\nprop.table(table(cat_train$marital_status,cat_train$income_level),1)\nprop.table(table(cat_train$class_of_worker,cat_train$income_level),1)\n\n\ntable(is.na(num_train))\ntable(is.na(num_test))\n\nax <-findCorrelation(x = cor(num_train), cutoff = 0.7)\n\nnum_train <- num_train[,-ax,with=FALSE] \nnum_test[,weeks_worked_in_year := NULL]\n\nmvtr <- sapply(cat_train, function(x){sum(is.na(x))/length(x)})*100\nmvte <- sapply(cat_test, function(x){sum(is.na(x)/length(x))}*100)\n\ncat_train <- subset(cat_train, select = mvtr < 5 )\ncat_test <- subset(cat_test, select = mvte < 5)\n\ncat_train <- cat_train[,names(cat_train) := lapply(.SD, as.character),.SDcols = names(cat_train)]\nfor (i in seq_along(cat_train)) set(cat_train, i=which(is.na(cat_train[[i]])), j=i, value=\"Unavailable\")\ncat_train <- cat_train[, names(cat_train) := lapply(.SD,factor), .SDcols = names(cat_train)]\ncat_test <- cat_test[, (names(cat_test)) := lapply(.SD, as.character), .SDcols = names(cat_test)]\n\nfor (i in seq_along(cat_test)) set(cat_test, i=which(is.na(cat_test[[i]])), j=i, value=\"Unavailable\")\ncat_test <- cat_test[, (names(cat_test)) := lapply(.SD, factor), .SDcols = names(cat_test)]\n\nfor(i in names(cat_train))\n{\n  p <- 5/100\n  ld <- names(which(prop.table(table(cat_train[[i]])) < p))\n  levels(cat_train[[i]])[levels(cat_train[[i]]) %in% ld] <- \"Other\"\n}\n\nfor(i in names(cat_test))\n{\n  p <- 5/100\n  ld <- names(which(prop.table(table(cat_test[[i]])) < p))\n  levels(cat_test[[i]])[levels(cat_test[[i]]) %in% ld] <- \"Other\"\n}\n\nsummarizeColumns(cat_train)[,\"nlevs\"]\nsummarizeColumns(cat_test)[,\"nlevs\"]\n\nnum_train[,.N,age][order(age)]\nnum_train[,.N,wage_per_hour][order(-N)]\n\n\nnum_train[,age:= cut(x = age,breaks = c(0,30,60,90),include.lowest = TRUE,labels = c(\"young\",\"adult\",\"old\"))]\nnum_train[,age := factor(age)]\n\nnum_test[,age:= cut(x = age,breaks = c(0,30,60,90),include.lowest = TRUE,labels = c(\"young\",\"adult\",\"old\"))]\nnum_test[,age := factor(age)]\n\nnum_train[,wage_per_hour := ifelse(wage_per_hour == 0,\"Zero\",\"MoreThanZero\")][,wage_per_hour := as.factor(wage_per_hour)]\nnum_train[,capital_gains := ifelse(capital_gains == 0,\"Zero\",\"MoreThanZero\")][,capital_gains := as.factor(capital_gains)]\n\nnum_train[,capital_losses := ifelse(capital_losses == 0,\"Zero\",\"MoreThanZero\")][,capital_losses := as.factor(capital_losses)]\nnum_train[,dividend_from_Stocks := ifelse(dividend_from_Stocks == 0,\"Zero\",\"MoreThanZero\")][,dividend_from_Stocks := as.factor(dividend_from_Stocks)]\n\nnum_test[,wage_per_hour := ifelse(wage_per_hour == 0,\"Zero\",\"MoreThanZero\")][,wage_per_hour := as.factor(wage_per_hour)]\nnum_test[,capital_gains := ifelse(capital_gains == 0,\"Zero\",\"MoreThanZero\")][,capital_gains := as.factor(capital_gains)]\nnum_test[,capital_losses := ifelse(capital_losses == 0,\"Zero\",\"MoreThanZero\")][,capital_losses := as.factor(capital_losses)]\nnum_test[,dividend_from_Stocks := ifelse(dividend_from_Stocks == 0,\"Zero\",\"MoreThanZero\")][,dividend_from_Stocks := as.factor(dividend_from_Stocks)]\n\nnum_train[,income_level := NULL]\n\nd_train <- cbind(num_train,cat_train)\nd_test <- cbind(num_test,cat_test)\n\nrm(num_train,num_test,cat_train,cat_test)\n\n\ntrain.task <- makeClassifTask(data = d_train,target = \"income_level\")\ntest.task <- makeClassifTask(data=d_test,target = \"income_level\")\n\ntrain.task <- removeConstantFeatures(train.task)\ntest.task <- removeConstantFeatures(test.task)\n\nvar_imp <- generateFilterValuesData(train.task, method = c(\"information.gain\"))\nplotFilterValues(var_imp,feat.type.cols = TRUE)\n\n#undersampling\ntrain.under <- undersample(train.task,rate = 0.1) \ntable(getTaskTargets(train.under))\n\n#Oversampling\ntrain.over <- oversample(train.task,rate=15) \ntable(getTaskTargets(train.over))\n\n#SMOTE\ntrain.smote <- smote(train.task,rate = 10,nn = 5)\n\n\n\n\n\n\n",
    "created" : 1500521708341.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3744380834",
    "id" : "FA6974F0",
    "lastKnownWriteTime" : 1500523782,
    "last_content_update" : 1500523782375,
    "path" : "~/Projects/Census problem - Imbalanced Data/Census data/code.R",
    "project_path" : "code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}